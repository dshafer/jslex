var borkborkbork = {
  init_state: 'notInWord',
  states: ['inWord_i_unseen', 'inWord_i_seen', 'notInWord'],
  rules: [
    { regex:'an', output:'un', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'An', output:'Un', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'au', output:'oo', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'Au', output:'Oo', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'a', output:'e', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'A', output:'E', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'e\\b', output:'e-a', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'ew', output:'oo', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'e', output:'i', states: [ 'notInWord' ], nextState:'inWord_i_unseen'},
    { regex:'E', output:'i', states: [ 'notInWord' ], nextState:'inWord_i_unseen'},
    { regex:'f', output:'ff', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'ir', output:'ur', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'i', output:'ee', states: ['inWord_i_unseen'], nextState:'inWord_i_seen'},
    { regex:'ow', output:'oo', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'o', output:'oo', states: [ 'notInWord' ], nextState:'inWord_i_unseen'},
    { regex:'O', output:'Oo', states: [ 'notInWord' ], nextState:'inWord_i_unseen'},
    { regex:'o', output:'u', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'tion', output:'shun', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'u', output:'oo', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'U', output:'Oo', states: ['inWord_i_unseen', 'inWord_i_seen']},
    { regex:'the', output:'zee', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'The', output:'Zee', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'th\b', output:'t', states: ['inWord_i_unseen', 'inWord_i_seen', 'notInWord']},
    { regex:'v', output:'f', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'V', output:'F', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'w', output:'v', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'W', output:'V', states: ['inWord_i_unseen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'bork\\b', output:'bork', states: [ 'notInWord' ]},
    { regex:'Bork\\b', output:'Bork', states: [ 'notInWord' ]},
    { regex:'[.]$', output:'. Bork Bork Bork!', states: ['inWord_i_unseen', 'inWord_i_seen', 'notInWord'], nextState:'notInWord'},
    { regex:'[!]$', output:'! Bork Bork Bork!', states: ['inWord_i_unseen', 'inWord_i_seen', 'notInWord'], nextState:'notInWord'},
    { regex:'[?]$', output:'? Bork Bork Bork!', states: ['inWord_i_unseen', 'inWord_i_seen', 'notInWord'], nextState:'notInWord'},
    { regex:'\\w', states: ['inWord_i_unseen', 'inWord_i_seen', 'notInWord'], nextState:'inWord_i_unseen'},
    { regex:'\\W', states: ['inWord_i_unseen', 'inWord_i_seen', 'notInWord'], nextState:'notInWord'}
  ]
}